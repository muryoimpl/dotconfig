{
  "useState": {
    "prefix": "useS",
    "body": [
      "const [${1}, set${1}] = useState($0)"
    ],
    "description": "useState"
  },
  "useEffect": {
    "prefix": "useE",
    "body": [
      "useEffect(() => {",
      "\t$0",
      "}, [])"
    ],
    "description": "useEffect"
  },
  "useContext": {
    "prefix": "useC",
    "body": [
      "const ${1} = useContext(${0})"
    ],
    "description": "useContext"
  },
  "useCallback": {
    "prefix": "useCB",
    "body": [
      "const ${1} = useCallback(() => {",
      "\t$0",
      "}, [])"
    ],
    "description": "useCallback"
  },
  "functionComponent": {
    "prefix": "sfce",
    "body": [
      "import type { ReactElement } from \"react\"\n",
      "export function ${1}({  }:Props): ReactElement {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$0",
      "\t\t</>",
      "\t)",
      "}"
    ],
    "description": "Function Component Export"
  },
  "export const": {
    "prefix": "exportcon",
    "body": [
      "export const ${1:name}:${2:type} = ${2};"
    ],
    "description": "export const"
  },
  "export function": {
    "prefix": "exportfunc",
    "body": [
      "export function ${1:func}({  }:${2:type}): ${3:retType} {",
      "\t$0",
      "}"
    ],
    "description": "export function"
  },
  "zod object": {
    "prefix": "zodobj",
    "body": [
      "const ${1:name} = z.object({",
      "\t$0",
      "});"
    ],
    "description": "zod object"
  },
  "zod infer": {
    "prefix": "zodinfer",
    "body": [
      "type ${1:name} = z.infer<typeof ${2:typeName}>;"
    ],
    "description": "zod infer"
  },
  "export default": {
    "prefix": "exportdefault",
    "body": [
      "export default ${1:name}"
    ],
    "description": "export default"
  }
}
